# Кейс №1. Задача коммивояжера
# Контекст:
# Предположим, вам заказали разработать программу для решения задачи коммивояжера с использованием генетического алгоритма.
# Задача коммивояжера - это задача поиска наиболее оптимального маршрута, проходящего через указанные вершины хотя бы по одному разу с последующим возвратом в вершину начала пути.
# ТЗ: Ваша программа будет использована в реальном времени как микросервис.
# Ваша задача: разработать скрипт, протестировать, упаковать скрипт в микросервис и передать в продакшн.
# Задача: Поразмышляйте. Какую парадигму будете использовать для разработки скрипта и почему именно её?

# Обсуждение:
# Здесь все зависит от того какой алгоритм оптимизации вы хотите использовать для решения задачи:
# ● Если будете писать свой алгоритм с нуля - то почти наверняка стоит использовать императивную парадигму, для низкоуровневых манипуляций с переменными и памятью.
# ● Если хотите использовать готовый алгоритм из коробки (в Python как раз таких полно), то можно реализовать основную часть как декларативную. В таком случае, скорее всего у вас в программе будет какой-нибудь класс Solver, который на вход будет получать условия задачи и возвращать результат.


# Кейс №2. Визуализация
# Контекст:
# На этот раз аналитикии вам заказали скрипт для получения визуализации некоторых данных. Для разработки вы решили использовать Pythonбиблиотеку “matplotlib”.
# На вход подаются данные, на выходе какая-то аналитика. Таким образом, ваш скрипт - это последовательность преобразований данных + построение графиков.
# Задача: Поразмышляйте. Какую парадигму будете использовать и почему?

# Обсуждение:
# Мы знаем, что мы должны используем Python и конкретную библиотеку. Библиотека “matplotlib” - это удобный интерфейс для построения графиков, которая может быть использована как в императивном, так и в декларативном стиле.
# Что мы знаем про скрипт. Поскольку на вход мы получаем данные, то большая часть программы будет написана в декларативном стиле, поскольку манипулировать данными в императивном стиле не очень удобно. С другой стороны, отдельные части кода можно оформить в императивном стиле, если это удобнее.
